-- DATABASE ENGINE: SQLite

-- Création de la base de données
CREATE TABLE IF NOT EXISTS User (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  username VARCHAR(100) NOT NULL
);

CREATE TABLE IF NOT EXISTS Project (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  title VARCHAR(100) NOT NULL,
  start_date DATE,
  delivery_date DATE,
  manager_id INT NOT NULL,
  status TEXT NOT NULL CHECK(status IN ('paused', 'planned', 'in progress', 'delivered')) DEFAULT 'paused',
  FOREIGN KEY (manager_id) REFERENCES User(id) ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE TABLE IF NOT EXISTS Task (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  title VARCHAR(100) NOT NULL,
  description TEXT,
  status TEXT NOT NULL CHECK(status IN ('planned', 'in progress', 'completed', 'validated', 'paused')) DEFAULT 'paused',
  start_date DATE,
  priotity INT,
  advancement INT NOT NULL,
  project_id INT NOT NULL,
  FOREIGN KEY (project_id) REFERENCES Project(id) ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE TABLE IF NOT EXISTS Role (
  name VARCHAR(100) NOT NULL PRIMARY KEY
);

CREATE TABLE IF NOT EXISTS Permission (
  name VARCHAR(100) NOT NULL PRIMARY KEY
);

CREATE TABLE IF NOT EXISTS User_project (
  user_id INT NOT NULL,
  project_id INT NOT NULL,
  FOREIGN KEY (user_id) REFERENCES User(id) ON UPDATE NO ACTION ON DELETE NO ACTION,
  FOREIGN KEY (project_id) REFERENCES Project(id) ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE TABLE IF NOT EXISTS User_role (
  user_id INT NOT NULL,
  role_name VARCHAR(100) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES User(id) ON UPDATE NO ACTION ON DELETE NO ACTION,
  FOREIGN KEY (role_name) REFERENCES Role(name) ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE TABLE IF NOT EXISTS Role_permission (
  role_name VARCHAR(100) NOT NULL,
  permission_name VARCHAR(100) NOT NULL,
  FOREIGN KEY (role_name) REFERENCES Role(name) ON UPDATE NO ACTION ON DELETE NO ACTION,
  FOREIGN KEY (permission_name) REFERENCES Permission(name) ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE TABLE IF NOT EXISTS Required_task (
  task_id INT NOT NULL,
  required_task_id INT NOT NULL,
  FOREIGN KEY (task_id) REFERENCES Task(id) ON UPDATE NO ACTION ON DELETE NO ACTION,
  FOREIGN KEY (required_task_id) REFERENCES Task(id) ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE TABLE IF NOT EXISTS Task_subtask (
  task_id INT NOT NULL,
  subtask_id INT NOT NULL,
  FOREIGN KEY (task_id) REFERENCES Task(id) ON UPDATE NO ACTION ON DELETE NO ACTION,
  FOREIGN KEY (subtask_id) REFERENCES Task(id) ON UPDATE NO ACTION ON DELETE NO ACTION
);
